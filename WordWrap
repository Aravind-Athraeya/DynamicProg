// ConsoleApplication2.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include <set>
#include <iostream>
#include<conio.h>
#include <sstream>
#include<stdio.h>
#include<stdlib.h>
#include <queue>
#include <unordered_set>

using namespace std;
// https://www.geeksforgeeks.org/word-wrap-problem-dp-19/
// step 1  - Build teh cost matrix. USe sum of square spaces to calcualte cost. UPdate Max value as infinity for words higher than Max width
// step 2 - use cost matrix to find mim value

#define It_MAX 2000000000
#define size 5


int printSolution(int p[], int n)
{
	int k;
	if (p[n] == 1)
		k = 1;
	else
		k = printSolution(p, p[n] - 1) + 1;
	cout << "Line number " << k << ": From word no. " << p[n] << " to " << n << endl;
	return k;
}

void WordWrap(int l[], int n, int M)
{

	int cost[size][size];// n value
	// Building the Cost Matrix
	for (int i = 0; i < n; i++){
		int spaceTillNow = 0;
		int wordsTillNow = 0;
		for (int j = 0; j < n; j++){
			if (cost[i][j] < 0)
				cost[i][j] = 0;// Initiztize to zero to avoid unnecessary pointer -ve values here
			if (j + i < n)
			{
			
			wordsTillNow = wordsTillNow + l[j + i]; // Fror new each line, start the array from the next item in the list, as in 2nd line should skip tushar and start with roy
			// Hence ,j + i
					if (wordsTillNow + j > M) // To consider spaces between words as well
						cost[i][j + i] = It_MAX;
					else
					{
						spaceTillNow = M - (wordsTillNow + j);
						//Additional one is consider space between two words in a line .- j
						cost[i][j + i] = spaceTillNow * spaceTillNow; // Ignore the first cell, because first item is taken by the line above you
					}
		    }
			  
		}

	}


	int c[size + 1]; // For better intution
	int p[size + 1];

	c[0] = 0;
	for (int j = 1; j <= n; j++)
	{
		 c[j] = It_MAX;;
		for (int i = 1; i <= j; i++)
		{
			if (c[i - 1] != It_MAX && cost[i -1][j-1] != It_MAX &&
				(c[i - 1] + cost[i- 1][j -1] < c[j]))
			{
				c[j] = c[i - 1] + cost[i -1][j - 1];
				p[j] = i;
			}


		}

	}

	printSolution(p, n);

}





int main()
{
	//int l[] = { 3, 2, 2, 5 }; //  Tom is my uncle
	int l[] = { 6, 3, 5, 2,4 };
	int n = sizeof(l) / sizeof(l[0]);
	int MaxWidth = 10; // Max Width
	WordWrap(l, n, MaxWidth);
	return 0;

}

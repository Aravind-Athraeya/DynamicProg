// ConsoleApplication2.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include <set>
#include <iostream>
#include<conio.h>
#include <sstream>
#include<stdio.h>
#include<stdlib.h>
#include <queue>
#include <unordered_set>

using namespace std;
// https://www.geeksforgeeks.org/word-wrap-problem-dp-19/
// step 1  - Build teh cost matrix. USe sum of square spaces to calcualte cost. UPdate Max value as infinity for words higher than Max width
// step 2 - use cost matrix to find mim value

#define It_MAX 2000000000
#define eggs 2
#define floor 6

// Step 1: https://www.youtube.com/watch?v=3hcaVyX00_4
//https://www.youtube.com/watch?v=o_AJ3VWQMzA
// Step 2: Calcualte for one egg
// Step 3 : use that to build for 2 eggs
// Formule -  for x = 0 to n-1 then Min{ 1 + Max(f(floor - x, eggs), f(floor - 1, eggs - 1)) }

int GetMax(int egg, int floors)
{



	return 0;

}



int eggDrop(int n, int k)
{

	int Cost[eggs + 1][floor + 1];

	for (int i = 1; i <= eggs; i++){

		for (int j = 1; j <= floor; j++){

			if (i == 1 || j == 1)
			{
				Cost[i][j] = j; 
				//For one floor alone --=== > f(floor,eggs) =  1 where  Floor is 1
				//For one egg alone --=== > f(floor,eggs) = floor where  egg is 1
			}
		     else
			{
			  
				 Cost[i][j] = It_MAX; // set it to max and update it based on min value 
							 
					 
				 if( j > 1 && (1 + GetMax(i,j)) < Cost[i][j])
				  {
					 Cost[i][j] = 1 + GetMax(i, j);
				  }

			
			}





		}
	}


	return Cost[eggs][floor];

}


int main()
{
	int n = eggs, k = floor;

	printf("nMinimum number of trials in worst case with %d eggs and "
		"%d floors is %d \n", n, k, eggDrop(n, k));

	return 0;

}

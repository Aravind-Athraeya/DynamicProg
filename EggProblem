/ ConsoleApplication2.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include <set>
#include <iostream>
#include<conio.h>
#include <sstream>
#include<stdio.h> 
#include<stdlib.h>
#include <queue>
#include <unordered_set>


using namespace std;
// https://www.geeksforgeeks.org/word-wrap-problem-dp-19/
// step 1  - Build teh cost matrix. USe sum of square spaces to calcualte cost. UPdate Max value as infinity for words higher than Max width
// step 2 - use cost matrix to find mim value

#define It_MAX 2000000000
#define eggs 2
#define floor 6

// Step 1: https://www.youtube.com/watch?v=3hcaVyX00_4
//https://www.youtube.com/watch?v=o_AJ3VWQMzA
//https://www.youtube.com/watch?v=KVfxgpI3Tv0
// Step 2: Calcualte for one egg
// Step 3 : use that to build for 2 eggs
// Formule -  for x = 0 to n-1 then Min{ 1 + Max(f(floor - x, eggs), f(floor - 1, eggs - 1)) }

int GetMax(int a, int b)
{
	if (a > b)
		return a;
	else
		return b;

}



int eggDrop(int n, int k)
{

	int Cost[eggs + 1][floor + 1];

	int c = 0;
	for (int i = 0; i <= floor; i++){
		Cost[1][i] = i;
	}

	for (int e = 2; e <= eggs; e++){
		for (int f = 1; f <= floor; f++){
			Cost[e][f] = It_MAX;
			for (int k = 1; k <= f; k++){
				c = 1 + GetMax(Cost[e - 1][k - 1], Cost[e][f - k]);
				if (c < Cost[e][f]){
					Cost[e][f] = c;
				}
			}
		}
	}

	return Cost[eggs][floor];

}


int main()
{
	int n = eggs, k = floor;

	printf("nMinimum number of trials in worst case with %d eggs and "
		"%d floors is %d \n", n, k, eggDrop(n, k));

	return 0;

}

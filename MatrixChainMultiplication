
#include "stdafx.h"
#include <set>
#include <iostream>
#include<conio.h>
#include <sstream>
#include<stdio.h> 
#include<stdlib.h>
#include <queue>
#include <unordered_set>

using namespace std;


//https://www.youtube.com/watch?v=vgLJZMUfnsU
//Step 1 -  Cost of multipliying matrix with itself is zero.
//Step 2 - Bottom up approac - Start from 1 to go N length.
// Step 3 - Use Cost table to choose minimum cost
 // Dont Mug up the formula -- Write it downa and generalize

#define size 5
#define INTMAX 50000000000
int MatrixChainMultiplication(int p[], int n)
{

	// Decalre cost matrix
	int CostMatrix[size + 1][size + 1] = {0};

	// Fill the diagonal elements
	int counter = 1;
	while (counter <= size)
	{
		// Cost of Multiplying a matrix with itself is the same. This is for length one
		CostMatrix[counter][counter] = 0;
		counter += 1;
	}


	// Fill up for the other ones
	for (int length = 2; length < size; length++)
	{
		for (int i = 1; i <= size - length; i++)
		{ 
			int MinCost = INTMAX;
			for (int j = 1; j < length; j++)
			{
				int ComputedCost = p[i - 1] * p[i] * p[i + 1];
				if (MinCost > ComputedCost)
					MinCost = ComputedCost;
			}
			CostMatrix[i][i + length - 1] = MinCost;

		}



	}

	return 0;

}




int main()
{
	int arr[] = { 1, 2, 3, 4 , 5};
	int sizne = sizeof(arr) / sizeof(arr[0]);

	cout << "Minimum number of multiplications is " << MatrixChainMultiplication(arr, sizne);
	return 0;

}

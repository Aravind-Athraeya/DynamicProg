
#include "stdafx.h"
#include <set>
#include <iostream>
#include<conio.h>
#include <sstream>
#include<stdio.h> 
#include<stdlib.h>
#include <queue>
#include <unordered_set>

using namespace std;


#define size 5


bool isExistsInDictionary(string woruhd)
{



	string dictionary[] = { "mobile", "samsung", "sam", "sung", "man", "mango",
		"icecream", "and", "go", "i", "like", "ice", "cream" };
	int s = sizeof(dictionary) / sizeof(dictionary[0]);
	for (int i = 0; i < s; i++)
	if (dictionary[i] == woruhd)
		return true;

	return false;

}

bool wordBreakSplit(string word, int (WordBreakMartix)[size], int additive)
{
	bool result = false;
	string first, second;
	// base cast for empty string

	if (word == "")
		return true;
	
	int length = word.length();
	for (int i = 1; i <= length; i++)
	{
	
	    	first = word.substr(0, i);
			second = word.substr(i, length);
		   bool DictionaryCheckFirstSplit = isExistsInDictionary(first);
		   bool DictionaryCheckSecondSplit = isExistsInDictionary(second);

		   if (DictionaryCheckFirstSplit && DictionaryCheckSecondSplit)
		   {
			   WordBreakMartix[additive] = 1;
			   return true;
		   }
		   else
		   {
			   bool recursive = false;
			   if (WordBreakMartix[additive + 1] != -1)
				   recursive = WordBreakMartix[additive + 1];
			   else
				   recursive = wordBreakSplit(second, WordBreakMartix, additive + 1);

			   result = recursive && DictionaryCheckFirstSplit;
			   if (result)
			   {
				   WordBreakMartix[additive]= 1;
				   break;
			   }
			   else
			   {
				   WordBreakMartix[additive] = 0;
			   }
							
		   }
	


	}

	return result;

}

bool wordBreakAbstract(string word)
{
	int WordBreakMartix[size] = { -1 };
	if (isExistsInDictionary(word))
		return true;
	else
		return wordBreakSplit(word, WordBreakMartix, 0);



}

int main()
{

	wordBreakAbstract("isami") ? cout << "Yes\n" : cout << "No\n";
	return 0;

}

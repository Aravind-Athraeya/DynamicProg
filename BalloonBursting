
#include "stdafx.h"
#include <set>
#include <iostream>
#include<conio.h>
#include <sstream>
#include<stdio.h> 
#include<stdlib.h>
#include <queue>
#include <unordered_set>

using namespace std;


#define StringLength 6
#define PatternLength 5

////
////index:     0   1   2   3
////       + -------------- - +
////nums : 1 | 3 | 1 | 5 | 8 | 1
////       + -------------- - +

// Step 1: https://www.youtube.com/watch?v=o3-PUPXiVfI
// Intuition - Think about when the last ballon is burst. 
//Let's say an array -[3,1,5,8] and let assume 3 is the last ballon to be burst and [1,5,8] is already solved to get an optimal value for Max coins.
// During the Last step - 1 [Value form bursting 3 + Optimal value of [1,5,8] 1
// Optimal [Last balloon] =  1*3*1  + Opt[1,5,8] or in case on index 1*3*1  + Opt[1,3]
// Optimal [Last balloon] = Max of { 1*3*1  + Opt[1,3],1*1*1  + Opt[0,0] + Opt[2,3],1*5*1 + Opt[0,1] + Opt[3,3],1*8*1  + Opt[0,2]}
//Opt[1,3] = Max of {  3 *  1 * 1 + Opt[2,3], 3 * 5 * 1 + Opt[1,1 + Opt[3,3]], 3 * 8 * 1 + Opt[1,2]}
// Opt
// OPT[i,j] = For K i-> j => Max of {  One the left  * K *  One to the right   + Opt[i+ k,j]}
#define M 5

int BurstBallons(int balloons[], int length)
{

	int B[M + 2] = {0};

	B[0] = 1; // One before the array
	B[M + 1] = 1; // One after the array

	// Copy values from A to B

	for (int i = 1; i <= M; i++)
		B[i] = balloons[i - 1];



	// Algorthim


	// Declare DP Array  [1,1,2,3,4,5,1]
	int MaxGain[M + 2][M + 2];
	for (int length = 1; length < M + 1; length++){ // For each single entry array when the last ballon is bursted
		for (int leftindex = 1; leftindex <= M - length + 2; leftindex++){ // Find the left and the right

			int rightindex = leftindex + length - 1;
			
			for (int last = leftindex; last < rightindex + 1; last++)
			{
				MaxGain[leftindex][rightindex] = max(MaxGain[leftindex][rightindex],
					MaxGain[leftindex][last - 1] +
					B[leftindex - 1] * B[last] * B[rightindex + 1] +
					MaxGain[last + 1][rightindex]);
			}





		
		}
	}


	return MaxGain[1][M];


}


int main()
{
	int A[] = { 1, 2, 3, 4, 5 };

	// Size of the array 
	int N = sizeof(A) / sizeof(A[0]);

	// Calling function 
	cout << BurstBallons(A, N) << endl;
	return 0;

}
